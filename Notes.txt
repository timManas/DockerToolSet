Docker ! 

1. Why do we use Docker ?
> To install pr easier to installation of applications (DB, MQ ..etc) easier
> We do not have to worry about dependencies

2. What is an image ? 
Single file with all the reps and config requrired to run a program 
es. Redis, MongoDB

3. What is a container ? 
- Instance of an image (i.e a Running program)

4. What is the function of the Docker Client ?
- Issue commands to the Docker Server (i.e Docker Daemon)  which is responsible for 
creating images, running containers, etc.
- Users never control the Docker Server but we can issue commands to it via CLI

5. How to start up Docker ?
1. Do to applications
2. Open App 
3. Click on whale icon on top right
4. Sign in
5. Check version #

6. What happens when you run 'docker run hello-world'
 1. The Docker client contacted the Docker daemon.
 2. Docker daemon pulled the "hello-world" image from the Docker Hub.
 3. The Docker daemon created a new container from that image which runs the
    executable that produces the output you are currently reading.
 4. The Docker daemon streamed that output to the Docker client, which sent it
    to your terminal.

7. How does Docker run on my computer ? 
When you install  docker, you technically installed a linux virtual machine on your computer
- Inside VM, is where all the containers are executed

8. docker ps --all : shows all process that has been created previously

9 docker run image = "docker create image"  + "docker start image"

10. When we create the container - we take the snapshot from the image and prep it up for start

11. Creating the container is setting up file system and starting it is executing the file system

12. docker start -a imageId : the -a watches any output when started 

13. Once a container stops does NOT mean it is dead. we can still restart it again. Running docker ps will show it is just exited 

14. To delete all stopped containers
- docker system prune
** You will need to re-download all containers again

15. How to get container logs ?
docker logs <container id>

16. How to stop a container ? 
- docker stop <container id> : System shuts itself down and do a clean up. Soft stop
or
- docker kill <container id> : Kills the process completely. Stop RIGHT NOW
** ideally: use docker stop

17. How to execute additional commands in container 
- docker exec -it <containerid> <command>
** Use this to access the CLI 
- The "-it" flag is actually -i -t
-i : Attach StdIn
-t : Attach StdOut

18. When everything is being run on Docker, they actually inside a VM.

19. How to open a shell inside a container 
- docker ps 
- get container id
- docker exec -it containerid sh

20. Containers DO NOT interact with other components unless instructed to do so. They are completely isolated to each other




